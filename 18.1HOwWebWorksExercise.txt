## **Part One: Solidify Terminology**

In your own terms, define the following terms:

- What is HTTP?
HTTp us an application protocol designed to transfer information between netowork
devices and runs with other layers of the network.

- What is a URL?
url is aa unform resource locator, it is the adress given of a unique resource on the web

- What is DNS?
dns is the domain anme system, it is described as the phonebook of the internet, conencting web browsers with websites.

- What is a query string?
a query string is part of a uniform resource locator that assings values to specified paramaters

- What are two HTTP verbs and how are they different?
the http verbs consists of POST, GET, PUt, and DELETE. these corrspond to create, read, update or delete
operations.

- What is an HTTP request?
an http requests sends a message to a recieving server in a specific formatthen the server returns a response to the client.

- What is an HTTP response?
a response is made by a server to a cliant to provide the client with the resource it requests

- What is an HTTP header? Give a couple examples of request and response headers you have seen.
http headers responses provide critical informaiton to a client that includes the request status and how to process the responis.
the content-type header specifies the MIME type of data being sent while the cache-control header specifies the caching behavior.

- What are the processes that happen when you type “http://somesite.com/some/page.html” into a browser?
the browser figyres out wich sever on the internet needs to connect to. to do so it looks up the ip adress of the server hosting the website unsing the doman
typed in by using a dns lookup.

## **Part Two: Practice Tools**

1. Using ***curl***, make a ***GET*** request to the *icanhazdadjoke.com* API to find all jokes involving the word “pirate”
2. Use ***dig*** to find what the IP address is for *icanhazdadjoke.com*
3. Make a simple web page and serve it using ***python3 -m http.server***. Visit the page in a browser.


1 curl -H "accept: application/json" "https://icanhazdadjoke.com/search?term=pirate"
2 dig icanhazdadjoke.com +short
3
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Simple Web Page</title>
</head>
<body>
    <h1>Hello, World!</h1>
    <p>This is a simple web page served using Python's http.server module.</p>
</body>
</html>

---in terminal
python3 -m http.server -->> http://localhost:8000


## **Part Three: Explore Dev Tools**

Build a very simple HTML form that uses the GET method (it can use the same page URL for the action) when the form is submitted.

Add a field or two to the form and, after submitting it, explore in Chrome Developer tools how you can view the request and response headers.

Edit the page to change the form type to POST, refresh in the browser and re-submit. Do you still see the field in the query string? Explore in Chrome how you can view the request and response headers, as well as the form data.

---simple HTML form that uses the GET method:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Simple Form - GET Method</title>
</head>
<body>
    <h1>Simple Form - GET Method</h1>
    <form action="" method="GET">
        <label for="name">Name:</label>
        <input type="text" id="name" name="name">
        <br>
        <label for="email">Email:</label>
        <input type="email" id="email" name="email">
        <br>
        <button type="submit">Submit</button>
    </form>
</body>
</html>

form with the method changed to POST:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Simple Form - POST Method</title>
</head>
<body>
    <h1>Simple Form - POST Method</h1>
    <form action="" method="POST">
        <label for="name">Name:</label>
        <input type="text" id="name" name="name">
        <br>
        <label for="email">Email:</label>
        <input type="email" id="email" name="email">
        <br>
        <button type="submit">Submit</button>
    </form>
</body>
</html>

1- Right-click on the page and select "Inspect" to open Chrome Developer Tools.
2- Go to the "Network" tab.
3- Submit the form.
4- In the network tab, you should see the request corresponding to the form submission. Click on it to view its details.
5- You can view the request headers under the "Headers" tab and the response headers under the "Response" tab.


## **Part Four: Explore the URL API**

At times, it’s useful for your JavaScript to look at the URL of the browser window and change how the script works depending on parts of that (particularly the query string).

[Read about the URL API](https://developer.mozilla.org/en-US/docs/Web/API/URL)

Try some of the code examples in the Chrome Console so that you can get comfortable with the basic methods and properties for instances of the URL class.

const url = new URL("../cats", "http://www.example.com/dogs");
console.log(url.hostname); // "www.example.com"
console.log(url.pathname); // "/cats"
